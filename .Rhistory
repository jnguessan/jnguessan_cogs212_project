#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' 2. *What are the classes of the two `_z` variables?  Why are they not numeric vectors?*
#' The classes are shown as "charater", possibly because of the use of the function scale(). It was applied on the complete dataframe which includes non numerical values
#' # Problem 3: Coefficient plots #
#' *Next, let's figure out the steps to construct a coefficient plot, using the whole dataset.  We'll put these steps into functions, which will make things easier when we want to apply them to each subset of the data.*
#' 1. *First, we need to fit the linear regression model.  Just in case you haven't seen this before, here's what it looks like for the whole `pp` dataframe.  Just uncomment the line to proceed.*
#'
model = lm(bill_length_z ~ flipper_length_z, data = pp)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' 2. *What are the classes of the two `_z` variables?  Why are they not numeric vectors?*
#' The classes are shown as "charater", possibly because of the use of the function scale(). It was applied on the complete dataframe which includes non numerical values
#' # Problem 3: Coefficient plots #
#' *Next, let's figure out the steps to construct a coefficient plot, using the whole dataset.  We'll put these steps into functions, which will make things easier when we want to apply them to each subset of the data.*
#' 1. *First, we need to fit the linear regression model.  Just in case you haven't seen this before, here's what it looks like for the whole `pp` dataframe.  Just uncomment the line to proceed.*
#'
model = lm(bill_length_z ~ flipper_length_z, data = pp)
library(magrittr)
library(dplyr)
## Optional: messages about what exactly dplyr functions are doing
# library(tidylog)
library(purrr)
library(ggplot2)
library(palmerpenguins)
foo = ggplot(penguins, aes(flipper_length_mm, bill_length_mm,
color = species, group = species)) +
geom_point() +
stat_smooth(method = 'lm')
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' 2. *What are the classes of the two `_z` variables?  Why are they not numeric vectors?*
#' The classes are shown as "charater", possibly because of the use of the function scale(). It was applied on the complete dataframe which includes non numerical values
#' # Problem 3: Coefficient plots #
#' *Next, let's figure out the steps to construct a coefficient plot, using the whole dataset.  We'll put these steps into functions, which will make things easier when we want to apply them to each subset of the data.*
#' 1. *First, we need to fit the linear regression model.  Just in case you haven't seen this before, here's what it looks like for the whole `pp` dataframe.  Just uncomment the line to proceed.*
#'
model = lm(bill_length_z ~ flipper_length_z, data = pp)
View(pp)
View(pp)
library(magrittr)
library(dplyr)
## Optional: messages about what exactly dplyr functions are doing
# library(tidylog)
library(purrr)
library(ggplot2)
library(palmerpenguins)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' 2. *What are the classes of the two `_z` variables?  Why are they not numeric vectors?*
#' The classes are shown as "charater", possibly because of the use of the function scale(). It was applied on the complete dataframe which includes non numerical values
#' # Problem 3: Coefficient plots #
#' *Next, let's figure out the steps to construct a coefficient plot, using the whole dataset.  We'll put these steps into functions, which will make things easier when we want to apply them to each subset of the data.*
#' 1. *First, we need to fit the linear regression model.  Just in case you haven't seen this before, here's what it looks like for the whole `pp` dataframe.  Just uncomment the line to proceed.*
#'
model = lm(bill_length_z ~ flipper_length_z, data = pp)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' 2. *What are the classes of the two `_z` variables?  Why are they not numeric vectors?*
#' The classes are shown as "charater", possibly because of the use of the function scale(). It was applied on the complete dataframe which includes non numerical values
#' # Problem 3: Coefficient plots #
#' *Next, let's figure out the steps to construct a coefficient plot, using the whole dataset.  We'll put these steps into functions, which will make things easier when we want to apply them to each subset of the data.*
#' 1. *First, we need to fit the linear regression model.  Just in case you haven't seen this before, here's what it looks like for the whole `pp` dataframe.  Just uncomment the line to proceed.*
#'
model = lm(bill_length_z ~ flipper_length_z, data = pp)
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
summary()
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
summary()
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
#mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
summary()
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp = penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm))
pp %>%
scale(center = FALSE, scale = FALSE)
pp %>%
scale(center = FALSE, scale = FALSE)
View(pp)
pp %>%
scale(center = FALSE, scale = FALSE) %>%
mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm))
pp %>%
scale(center = FALSE, scale = FALSE) %>%
mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
pp %>%
scale(center = FALSE, scale = FALSE) %>%
mutate(bill_length_z = bill_length_mm)
View(pp)
pp
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
scale(center = FALSE, scale = FALSE) %>%
mutate(bill_length_z = bill_length_mm,flipper_length_z = flipper_length_mm)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp$bill_length_z = pp$bill_length_mm
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp$bill_length_z = pp$bill_length_mm
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp$bill_length_z = pp$bill_length_mm
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp$bill_length_z = pp$bill_length_mm
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
pp$bill_length_z = pp$bill_length_mm
library(magrittr)
library(dplyr)
## Optional: messages about what exactly dplyr functions are doing
# library(tidylog)
library(purrr)
library(ggplot2)
library(palmerpenguins)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
mutate(bill_length_z = scale(pp$bill_length_mm))
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
mutate(bill_length_z = scale(penguins$bill_length_mm))
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
mutate(bill_length_z = scale(bill_length_mm))
View(pp)
#' # Problem 2: Data cleaning #
#' *The example plot constructed separate linear regression models for each species of penguin.  The plot suggests the relationship between bill length and flipper length might be different for different species.  But it's difficult to reliably compare the angles of lines; it would be better to have a [coefficient plot](https://www.google.com/search?tbm=isch&sxsrf=ACYBGNRyi8SfWNSy75cZFoFev6s9HJqHSw%3A1570901418908&source=hp&biw=1004&bih=671&ei=qg2iXamtNK_E0PEPkZiswAQ&q=coefficient%20plot) and table.  And those are difficult to extract from the `ggplot()` object.  (Below, we'll come back to the fact that ggplot plots are actually objects.)  To do this, we need to split up the dataset, construct the regressions, and extract the coefficients.  Some functional aspects of R (and tidyverse packages that emphasize those aspects) give us an elegant way to do exact this.*
#'
#' *We'll warm up with pipes by doing some cleaning of the `penguins` dataset. To practice implementing **immutability**, we'll assign the cleaned dataframe to a new variable.*
#' 1. *Our cleaning has two steps.  First, we'll remove some observations with missing values for `bill_length_mm`.  Second, we'll use `scale()` to standardize bill length and flipper length, as the variables `bill_length_z` and `flipper_length_z`.  (We're just doing this to make the coefficient plots easier to read later on.  And as an exercise in using `dplyr()` and a preview of some things about dataframes.)  Write a pipe that does both of these cleaning steps and assigns the result to a variable `pp`.*
#'
pp <- penguins %>%
filter(! is.na(bill_length_mm)) %>%
mutate(bill_length_z = scale(bill_length_mm),flipper_length_z =scale(flipper_length_mm))
class(pp$bill_length_z)
pp
class(pp$flipper_length_z)
class(pp$flipper_length_mm)
filter(! is.na(bill_length_mm)) %>%
source("~/School/GRAD/FALL21/COGS 212/labs/lab-w04-paradigms/lab.R")
coefs_plot(model)
coefs_plot(model_coefs)
View(coefs_df)
#' 4. *What is the class of each column?  Explain why the name `coefs_df` is appropriate.*
#' The classes are:
#' factor
#' data.frame
#' list
#' numeric
#' character
#' The name is appropriate as coefs_df is a dataframe containing the coeeficient of the smaller dataframes created earlier
#' 5. *What happens when you run the following?*
coefs_plot(coefs_df)
rm(model_coefs)
#' 4. *What is the class of each column?  Explain why the name `coefs_df` is appropriate.*
#' The classes are:
#' factor
#' data.frame
#' list
#' numeric
#' character
#' The name is appropriate as coefs_df is a dataframe containing the coeeficient of the smaller dataframes created earlier
#' 5. *What happens when you run the following?*
coefs_plot(coefs_df)
source("~/School/GRAD/FALL21/COGS 212/Oakland_Police/oakland_ead.R")
## Check the packaging ----
skim(dataf)
## A critical question ----
## When a search has been conducted, do we know wether contraband was found?
#Semi-translated: when search_conducted == true, is !is.na(contraband_found)
dataf %>%
filter(search_conducted) %>%
mutate(contraband_known = !is.na(contraband_found)) %>%
count(search_conducted,contraband_known)
dataf %>%
head() %>%
View()
dataf %>%
tail() %>%
View()
##Validate against external source ----
#'Search results found this page by Oakland PG:
#'https://www.oaklandca.gov/resources/stop-data
#'Which contained this document/report
#'https://cao-94612.s3.amazonaws.com/documents/OPD-Racial-Impact-Report-2016-2018-Final-16Apr19.pdf
#'Page 8
#'
#'Appear to be missing
#' 2300 rows from 2016 and 800 rows from 2017
#' Breaking down by gender, it seems like the data gap is mostly for men, with smaller gaps for women almost none for NA gender
dataf %>%
mutate(year = year(date)) %>%
filter(year %in% c(2016,2017)) %>%
count(year, subject_sex)
## Men in 2016 in the report vs our data
(24576-22563)/24576
## Women in 2016 in the report vs our data
(7965-7677)/7965
dataf %>%
count(subject_race) %>%
mutate(share = n / sum(n)) %>%
arrange(desc(share))
##Q2 Whether Black people who are stopped might be more likely to have contraband
#'Preliminary questions:
#'What fraction of stops had a search?
#'Are there disparities by race there?
#'
dataf %>%
count(search_conducted) %>%
mutate(share = n / sum(n))
##Q2 Whether Black people who are stopped might be more likely to have contraband
#'Preliminary questions:
#'What fraction of stops had a search?
#'Are there disparities by race there?
#'
dataf %>%
group_by(subject_race) %>%
count(search_conducted) %>%
mutate(share = n / sum(n))
##Q2 Whether Black people who are stopped might be more likely to have contraband
#'Preliminary questions:
#'What fraction of stops had a search?
#'Are there disparities by race there?
#'
dataf %>%
group_by(subject_race) %>%
count(search_conducted) %>%
mutate(share = n / sum(n)) %>%
ungroup()
##Q2 Whether Black people who are stopped might be more likely to have contraband
#'Preliminary questions:
#'What fraction of stops had a search?
#'31% of stops had a search
#'Are there disparities by race there?
#'Yes, black peeps who are stopped are more likely to be searched than white peeps who are stopped
dataf %>%
group_by(subject_race) %>%
count(search_conducted) %>%
mutate(share = n / sum(n)) %>%
ungroup() %>%
filter(search_conducted)
dataf %>%
filter(search_conducted) %>%
count(contraband_found) %>%
mutate(share = n / sum(n))
dataf %>%
filter(search_conducted) %>%
group_by(subject_race) %>%
count(search_conducted, subject_race,contraband_found) %>%
mutate(share = n / sum(n)) %>%
ungroup() %>%
filter(contraband_found)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
barplot(table(df_charts$country), main = "Number of Appearances in Top 15",horiz = TRUE, las=1)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(df)
plot(df1$gdp_per_capita,df1$medals, main = paste("Top 15 Medal Winners in", i), xlab="GDP Per Capita", ylab="Medals")
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(p)
print(p)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
p <- ggplot(df1, aes(x = gdp_per_capita, y = medals)) + geom_point()
print(p)
p + scale_x_continuous(trans = 'log10')
print(p)
View(df1)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(df)
View(df_charts)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
?(df$country)
? df$country
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
df$country
class(df$country)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(gdp_dataf)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
library(ggrepel)
library(ggforce)
library(ggtext)
install.packages(ggtext)
install.packages('ggtext')
install.packages('ggrepel')
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
p <- ggplot(df1, aes(x = scaled_gdppc, y = medals, label = country)) + geom_point() + ggtitle(paste("Number of Medals vs Log10 Scaled GDP Per Capita in ",i)) +xlab("Scaled GDP Per Capita") + ylab("Medals")
p + geom_label_repel()
print(p)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
df1 <- df %>%
p<-ggplot(., aes(x=country, y=medals)) +
geom_bar(stat="identity")
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
p<-ggplot(df, aes(x=country, y=medals)) +
geom_bar(stat="identity")
print(p)
p<-ggplot(df, aes(x=country, y=medals)) +
geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle = 90))
print(p)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(df)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
sum(medals)
df <- arrange(df, desc(medals)) %>%
group_by(country)
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
drop(year) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
drop(year) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
drop(.year) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
select(year) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
select(year) %>%
mutate(medals = sum(medals))
df <- arrange(df, desc(medals)) %>%
group_by(country) %>%
select(year)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
View(dft)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
source("~/School/GRAD/FALL21/COGS 212/final/jnguessan_cogs212_project.R", echo=TRUE)
